<?xml version="1.0" encoding="UTF-8"?>

<project name="WF-Test2" default="run-final-test" basedir=".">
	<description>
			Script for WF final test 2
	</description>
	
	<!-- The lolcation of this assignment -->
	<property name="lab4.location" location="." />
	<property name="lab3.location" location="." />
	<!-- The random "WorkflowMonitorFactory" used for WFInfo, for the server and for the tests -->
	<property name="WFInfo.WFMonitorFactory" value="it.polito.dp2.WF.Random.WorkflowMonitorFactoryImpl" />
	
	<!-- The location to be used for class files -->
	<property name="build.dir" location="${lab4.location}/build" />
	<!-- The location for source files -->
	<property name="src.dir" location="${lab4.location}/src" />
	<!-- The location for jar files -->
	<property name="lib.dir" location="${lab4.location}/lib" />

	<!-- The ant file to be provided for client and server compilation -->
	<property name="sol.build.file" value="sol_build.xml" />
	<property name="sol.build.filepath" location="${lab4.location}/${sol.build.file}" />
	
	<!-- The default test classes -->
	<property name="test1.class" value="it.polito.dp2.WF.lab4.tests.WFTest21" />
	<property name="test2.class" value="it.polito.dp2.WF.lab4.tests.WFTest22" />
	
	<!-- The default URLs of the web services -->
	<property name="URL" value="http://localhost:7070/wfcontrol" />
	<property name="URL2" value="http://localhost:7071/wfinfo" />	
	<property name="URL3" value="http://localhost:7080/wfcontrol" />
	<property name="URL4" value="http://localhost:7081/wfinfo" />
	
	<!-- The port used for the server of assignment 3 -->
	<property name="PORT" value="8181"/>

	<!-- The default workflow to be instantiated by client2 and client4	-->	
	<property name="workflowName" value="NormalSale" />
	
	<!-- The zip file with the solution to be submitted -->
	<property name="sol.zip" value="solution.zip" />
	
	<!-- The server and client classes -->
	<property name="server.class" value="it.polito.dp2.WF.sol4.server.WorkflowServer" />
	<property name="client2.class" value="it.polito.dp2.WF.sol4.client2.WFControlClient" />
	<property name="server2.class" value="it.polito.dp2.WF.sol4.server2.WorkflowServer" />
	<property name="client4.class" value="it.polito.dp2.WF.sol4.client4.WFControlClient" />
	
	<!-- The classpath that includes only the WF.jar -->
	<path id="WF.classpath">
		<pathelement location="${lib.dir}/WF.jar"/>
	</path>

	<!-- The classpath to be used for running the servers -->
	<path id="server.classpath">
		<pathelement location="${lab4.location}/lib/WF.jar" />
		<pathelement location="${lab4.location}/lib/WFRandom.jar" />
		<pathelement location="${lab4.location}/lib/lab3.jar" />
		<pathelement path="${build.dir}" />
	</path>
	
	<!-- The classpath to be used for running the tests -->
	<path id="test.classpath">
		<pathelement location="${lab4.location}/lib/WF.jar" />
		<pathelement location="${lab4.location}/lib/lab4.jar" />
		<pathelement location="${lab4.location}/lib/WFRandom.jar" />
		<pathelement location="${lab4.location}/lib/junit-4.5.jar" />
		<pathelement path="${build.dir}" />
		<pathelement location="${lib.dir}/lab4_2.jar"/>
		<pathelement location="${lib.dir}/lab3.jar"/>
		<pathelement location="${lib.dir}/ant.jar"/>
		<pathelement location="${lib.dir}/tools.jar"/>
	</path>

	<!-- The classpath to be used for running the clients -->
	<path id="client.classpath">
		<pathelement path="${build.dir}" />
	</path>

	<target name="setseed" unless="seed">
		<tstamp>
			<format property="seed" pattern="1HHmmss" />
		</tstamp>
	</target>

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<!-- These are the same targets found in build.xml, reported here for simplicity -->
	<target name="build-server" depends="init">
		<ant antfile="${sol.build.filepath}" target="build-server">
			<property name="basedir" value="${lab4.location}" />
		</ant>
	</target>
	
	<target name="build-client" depends="init">
		<ant antfile="${sol.build.filepath}" target="build-client">
			<property name="basedir" value="${lab4.location}" />
		</ant>
	</target>
	
	<!-- This target calls the new build-test2-clients target in sol_build.xml -->
	<target name="build-test2-clients" depends="init">
		<ant antfile="${sol.build.filepath}" target="build-test2-clients">
			<property name="basedir" value="${lab4.location}" />
		</ant>
	</target>
	
	<!-- Target for running the server of assignment 3 with testcase=1 seed=${seed} and port=${PORT} -->
	<target name="run-ass3-server" depends="setseed" description="Run the server of Assignment 3">
		<java fork="yes" jar="${lib.dir}/WorkflowInfoServer.jar" dir=".">
			<sysproperty key="it.polito.dp2.WF.WorkflowMonitorFactory" value="${WFInfo.WFMonitorFactory}" />
			<sysproperty key="it.polito.dp2.WF.Random.seed" value="${seed}"/>
			<sysproperty key="it.polito.dp2.WF.Random.testcase" value="1"/>
			<arg value="${PORT}" />
		</java>
	</target>
	
	<!-- Macro task for running client2
	     Attributes:
	     - url the URL to be passed to the client as first argument
	     - resultp the name of the property to be used for storing the exit code of the client
	     The client is called passing  ${workflowName} as second argument
	-->
	<macrodef name="run-client2">
		<attribute name="resultp"/>
		<attribute name="url"/>
		<sequential>
			<echo>Running client2 with URL=${URL} and WorkflowName=${workflowName}</echo>
			<java classname="${client2.class}" failonerror="false" fork="yes" resultproperty="@{resultp}">
				<arg value="@{url}" />
				<arg value="${workflowName}" />
				<classpath>
					<path refid="client.classpath" />
				</classpath>
			</java>
			<echo message="Return code of client2 is ${@{resultp}} (expected 0)" />
		</sequential>
	</macrodef>
	
	<!-- This is the same target found in build.xml but with testcase set to 0 -->
	<target name="run-server" depends="build-server">
		<echo>Running server with seed: ${seed}</echo>
		<java classname="${server.class}" failonerror="true" fork="yes">
			<sysproperty key="it.polito.dp2.WF.Random.seed" value="${seed}" />
			<sysproperty key="it.polito.dp2.WF.Random.testcase" value="0" />
			<sysproperty key="it.polito.dp2.WF.WorkflowMonitorFactory" value="${WFInfo.WFMonitorFactory}" />
			<classpath>
				<path refid="server.classpath" />
			</classpath>
		</java>
	</target>
	
	<!-- This is like the run-server target found in build.xml, but it runs server2, it has no dependency on build-server,
	     and it sets testcase to 0
	-->
	<target name="run-server2">
		<echo>Running server2 with seed: ${seed}</echo>
		<java classname="${server2.class}" failonerror="true" fork="yes">
			<sysproperty key="it.polito.dp2.WF.Random.seed" value="${seed}" />
			<sysproperty key="it.polito.dp2.WF.Random.testcase" value="0" />
			<sysproperty key="it.polito.dp2.WF.WorkflowMonitorFactory" value="${WFInfo.WFMonitorFactory}" />
			<classpath>
				<path refid="server.classpath" />
			</classpath>
		</java>
	</target>
	
	<!-- Target for running client4 with arguments URL=${URL3} and WorkflowName=${workflowName} -->
	<target name="run-client4" depends="build-test2-clients">
		<echo>Running client4 with URL=${URL3} and WorkflowName=${workflowName}</echo>
		<java classname="${client4.class}" failonerror="true" fork="yes">
			<arg value="${URL3}" />
			<arg value="${workflowName}" />
			<classpath>
				<path refid="client.classpath" />
			</classpath>
		</java>
	</target>
	
	<!-- Target for running the final tests - Use this target only -->
	<target name="run-final-test" depends="setseed">
		<echo>Running functional tests</echo>
		<echo>Seed: ${seed}</echo>

		<!-- Run tests -->
		<parallel>
		  <daemons>
		  	<antcall target="run-ass3-server"/>
		  </daemons>
		  <sequential>
			<sleep seconds="10"/>
		  	<echo></echo>
			<echo>Testing PART 1 (check modified server by junit tests)</echo>
			<antcall target="run-test-part1"/>
			<echo>Testing PARTS 2 and 3 (check modified server and clients by junit tests)</echo>
			<antcall target="run-test-part2"/>
		  </sequential>
		</parallel>
	</target>
	
	<!-- Target runFuncTest.real	-->
	<target name="runFuncTest.real">
		
		<echo>Running TEST 1 (client2 fails as expected when exceeding maximum number of processes)</echo>
		<antcall target="run-test-1"/>	
		
		<echo>Running TEST 2 (junit test: number of processes created is as expected)</echo>
		<antcall target="run-test-2"/>	

	</target>
	
	<!-- Targets for test part 1 -->
	<target name="run-server-client-and-junit-for-part1">
		<echo>Running the server, client2,  and the junit test for part 1...</echo>
	  	<parallel>
			  <daemons>
			  	<antcall target="run-server"/>
			  </daemons>
	  		  <sequential>
	  		  	<sleep seconds="10"/>
	  		    <antcall target="build-client"/>
	  		  	<run-client2 resultp="exitcode1" url="${URL}"/>
		  		<junit printsummary="yes" dir="." fork="yes" haltonfailure="no" showoutput="no" filtertrace="true" timeout="120000">
		  					<jvmarg value="-Djava.awt.headless=true" />
		  					<sysproperty key="it.polito.dp2.WF.Random.seed" value="${seed}"/>
		  					<sysproperty key="it.polito.dp2.WF.Random.testcase" value="0"/>
		  					<sysproperty key="it.polito.dp2.WF.lab4.test2.client2exitcode" value="${exitcode1}"/>
		  					<sysproperty key="it.polito.dp2.WF.WorkflowMonitorFactory" value="${WFInfo.WFMonitorFactory}" />
		  					<sysproperty key="it.polito.dp2.WF.lab4.URL" value="${URL2}" />
		  					<formatter type="brief" usefile="false"/>
		  					<test haltonfailure="no" failureproperty="test1.failed" name="${test1.class}"/>
		  					<classpath>
		  						<path refid="test.classpath" />
		  					</classpath>
  				</junit>
	  		  </sequential>
	  	</parallel>

	</target>
	
	<target name="test1-passed" unless="test1.failed" depends="run-server-client-and-junit-for-part1">
	    <echo>ALL TESTS FOR PART 1 PASSED</echo>
	</target>
	
	<target name="test1-failed" if="test1.failed" depends="run-server-client-and-junit-for-part1">
	    <echo>SOME TESTS FOR PART 1 FAILED</echo>
	</target>
	
	<target name="run-test-part1" depends="test1-passed, test1-failed">
	</target>
	
	<!-- Targets for test part 2 -->
	<target name="run-server-client-and-junit-for-part2">
		<echo>Running the server, client2,  and the junit test for part 2...</echo>
	  	<parallel>
			  <daemons>
			  	<antcall target="run-server2"/>
			  </daemons>
	  		  <sequential>
	  		  	<sleep seconds="10"/>
		  		<junit printsummary="yes" dir="." fork="yes" haltonfailure="no" showoutput="no" filtertrace="true" timeout="120000">
		  					<jvmarg value="-Djava.awt.headless=true" />
		  					<sysproperty key="it.polito.dp2.WF.Random.seed" value="${seed}"/>
		  					<sysproperty key="it.polito.dp2.WF.Random.testcase" value="${testcase}"/>
		  					<sysproperty key="it.polito.dp2.WF.WorkflowMonitorFactory" value="${WFInfo.WFMonitorFactory}" />
		  					<sysproperty key="it.polito.dp2.WF.lab4.URL" value="${URL4}" />
		  					<formatter type="brief" usefile="false"/>
		  					<test haltonfailure="no" failureproperty="test2.failed" name="${test2.class}"/>
		  					<classpath>
		  						<path refid="test.classpath" />
		  					</classpath>
  				</junit>
	  		  </sequential>
	  	</parallel>

	</target>

	<target name="test2-passed" unless="test2.failed" depends="run-server-client-and-junit-for-part2">
	    <echo>ALL TESTS FOR PART 2 PASSED</echo>
	</target>
	
	<target name="test2-failed" if="test2.failed" depends="run-server-client-and-junit-for-part2">
	    <echo>SOME TESTS FOR PART 2 FAILED</echo>
	</target>
	
	<target name="run-test-part2" depends="test2-passed, test2-failed">
	</target>


	<!-- target for cleaning -->
	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<!--target for building the final zip containing the solution -->
	<target name="make-final-zip">
		<zip destfile="${sol.zip}" 
			basedir="${lab4.location}" 
			includes="${sol.build.file} wsdl/** custom/* src/it/polito/dp2/WF/sol4/server/**/*.java src/it/polito/dp2/WF/sol4/server2/**/*.java src/it/polito/dp2/WF/sol4/client1/**/*.java src/it/polito/dp2/WF/sol4/client2/**/*.java src/it/polito/dp2/WF/sol4/client3/**/*.java src/it/polito/dp2/WF/sol4/client4/**/*.java answer.txt" />
	</target>
</project>
